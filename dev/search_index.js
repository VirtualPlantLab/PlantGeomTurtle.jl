var documenterSearchIndex = {"docs":
[{"location":"#Module-Geometry","page":"Home","title":"Module Geometry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PlantGeomTurtle","category":"page"},{"location":"#Turtle-geometry","page":"Home","title":"Turtle geometry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Turtle(::Type{T} = Float64) where T","category":"page"},{"location":"#PlantGeomTurtle.Turtle-Union{Tuple{}, Tuple{Type{T}}, Tuple{T}} where T","page":"Home","title":"PlantGeomTurtle.Turtle","text":"Turtle(Float64, message)\n\nCreate a meshing turtle that can convert a Graph into a 3D mesh using turtle operators, geometry primitives and methods of feed!(). By default, the meshing turtle will generate geometry primitives with double floating precision (Float64) but it is possible to generate a version with lower precision as in Turtle(Float32). The argument message is any user-defined object.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"head(turtle::Turtle)\nup(turtle::Turtle)\narm(turtle::Turtle)\npos(turtle::Turtle)","category":"page"},{"location":"#PlantGeomTurtle.head-Tuple{Turtle}","page":"Home","title":"PlantGeomTurtle.head","text":"head(turtle)\n\nExtract the direction vector (a Vec object) of the head of the turtle.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomTurtle.up-Tuple{Turtle}","page":"Home","title":"PlantGeomTurtle.up","text":"up(turtle)\n\nExtract the direction vector (a Vec object) of the back of the turtle.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomTurtle.arm-Tuple{Turtle}","page":"Home","title":"PlantGeomTurtle.arm","text":"arm(turtle)\n\nExtract the direction vector (a Vec object) of the arm of the turtle.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomTurtle.pos-Tuple{Turtle}","page":"Home","title":"PlantGeomTurtle.pos","text":"pos(turtle)\n\nExtract the current position of the turtle (a Vec object).\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"geoms(turtle::Turtle)\ncolors(turtle::Turtle)\nfaces(turtle::Turtle)\nmaterials(turtle::Turtle)","category":"page"},{"location":"#PlantGeomTurtle.geoms-Tuple{Turtle}","page":"Home","title":"PlantGeomTurtle.geoms","text":"geoms(turtle)\n\nExtract the 3D mesh generated by the turtle (a Mesh object).\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomPrimitives.colors-Tuple{Turtle}","page":"Home","title":"PlantGeomPrimitives.colors","text":"colors(turtle)\n\nExtract the color objects associated to each geometry primitive that was fed to the turtle.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomPrimitives.faces-Tuple{Turtle}","page":"Home","title":"PlantGeomPrimitives.faces","text":"geoms(turtle)\n\nExtract the faces of the 3D mesh generated by the turtle.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomPrimitives.materials-Tuple{Turtle}","page":"Home","title":"PlantGeomPrimitives.materials","text":"materials(turtle)\n\nExtract the material objects associated to each geometry primitive that was fed to the turtle.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"feed!","category":"page"},{"location":"#PlantGeomTurtle.feed!","page":"Home","title":"PlantGeomTurtle.feed!","text":"feed!(turtle::Turtle; mesh::Mesh, color::Colorant = nothing, mat::Material = nothing)\n\nGeneral purpose method to feed a mesh to a turtle together with color and material. Note that all primitives provided by VPL are implemented as meshes, but this is a generic method for meshes that are constructed directly by the user or imported from external software.\n\n\n\n\n\nfeed!(turtle::Turtle, node::Node, vars = nothing)\n\nDefault method for feed!() that does not do anything. This allows the user to include nodes in a graph without an associated geometry.\n\n\n\n\n\nfeed!(turtle::Turtle, g::Graph)\n\nProcess a Graph object with a turtle and generate the corresponding 3D mesh from executing the different feed!() methods associated to the nodes in the graph.\n\n\n\n\n\nfeed!(turtle::Turtle, collection::AbstractArray)\nfeed!(turtle::Turtle, collection::Tuple)\n\nFeed a turtle an array or tuple of objects (collection) with existing feed!() methods.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Scene","category":"page"},{"location":"#PlantGeomPrimitives.Scene","page":"Home","title":"PlantGeomPrimitives.Scene","text":"Scene(graph, Float64)\n\nCreate a 3D scene from a Graph object (g). By default, double floating precision will be used (Float64) but it is possible to generate a version with a different precision by specifying the corresponding type as in Scene(g, Float32). The Scene object contains a mesh of triangles as well as colors and materials associated to each primitive.\n\n\n\n\n\nScene(graphs, Float64; parallel = false, message = nothing)\n\nCreate a 3D scene for rendering from an array of Graph objects (graphs). The graphs may be processed serially (default) or in parallel using multithreading (parallel = true). By default, double floating precision will be used (Float64) but it is possible to generate a version with a different precision by specifying the corresponding type as in Scene(graphs, Float32).\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"T\nt!(turtle::Turtle; to)","category":"page"},{"location":"#PlantGeomTurtle.T","page":"Home","title":"PlantGeomTurtle.T","text":"T(to::Vec)\n\nNode that translates a turtle to the new position to (a Vec object).\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeomTurtle.t!-Tuple{Turtle}","page":"Home","title":"PlantGeomTurtle.t!","text":"t!(turtle; to = O())\n\nTranslate a turtle to the new position to (a Vec object).\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> using PlantGeomPrimitives\n\njulia> t!(turtle, to = Y(1.0));\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"OR\nor!(turtle::Turtle; head, up, arm)","category":"page"},{"location":"#PlantGeomTurtle.OR","page":"Home","title":"PlantGeomTurtle.OR","text":"OR(head::Vec, up::Vec, arm::Vec)\n\nNode that orients a turtle to a new direction by re-defining the local reference system.\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeomTurtle.or!-Tuple{Turtle}","page":"Home","title":"PlantGeomTurtle.or!","text":"or!(turtle; head = Z(), up = X(), arm = Y())\n\nOrient a turtle to a new direction by re-defining the local reference system. The arguments head, up and arm should be of type Vec.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> using PlantGeomPrimitives\n\njulia> or!(turtle, head = Y(), up = Z(), arm = X());\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"SET\nset!(turtle::Turtle; to, head, up, arm)","category":"page"},{"location":"#PlantGeomTurtle.SET","page":"Home","title":"PlantGeomTurtle.SET","text":"SET(to, head, up, arm)\n\nNode that sets the position and orientation of a turtle.\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeomTurtle.set!-Tuple{Turtle}","page":"Home","title":"PlantGeomTurtle.set!","text":"set!(turtle; to = O(), head = Z(), up = X(), arm = Y())\n\nSet position and orientation of a turtle. The arguments to, head, up and arm should be of type Vec and be passed as keyword arguments.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> using PlantGeomPrimitives\n\njulia> set!(turtle, to = O(), head = Y(), up = Z(), arm = X());\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"RU\nru!(turtle::Turtle{FT,UT}, angle::FT) where {FT,UT}","category":"page"},{"location":"#PlantGeomTurtle.RU","page":"Home","title":"PlantGeomTurtle.RU","text":"RU(angle)\n\nNode that rotates a turtle around up axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeomTurtle.ru!-Union{Tuple{UT}, Tuple{FT}, Tuple{Turtle{FT, UT}, FT}} where {FT, UT}","page":"Home","title":"PlantGeomTurtle.ru!","text":"ru!(turtle, angle)\n\nRotates a turtle around up axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> ru!(turtle, 45.0);\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"RA\nra!(turtle::Turtle{FT,UT}, angle::FT) where {FT,UT}","category":"page"},{"location":"#PlantGeomTurtle.RA","page":"Home","title":"PlantGeomTurtle.RA","text":"RA(angle)\n\nNode that rotates a turtle around arm axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeomTurtle.ra!-Union{Tuple{UT}, Tuple{FT}, Tuple{Turtle{FT, UT}, FT}} where {FT, UT}","page":"Home","title":"PlantGeomTurtle.ra!","text":"ra!(turtle, angle)\n\nRotates a turtle around arm axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> ra!(turtle, 45.0);\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"RH\nrh!(turtle::Turtle{FT,UT}, angle::FT) where {FT,UT}","category":"page"},{"location":"#PlantGeomTurtle.RH","page":"Home","title":"PlantGeomTurtle.RH","text":"RH(angle)\n\nNode that rotates a turtle around head axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeomTurtle.rh!-Union{Tuple{UT}, Tuple{FT}, Tuple{Turtle{FT, UT}, FT}} where {FT, UT}","page":"Home","title":"PlantGeomTurtle.rh!","text":"rh!(turtle, angle)\n\nRotate turtle around head axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> rh!(turtle, 45.0);\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"F\nf!(turtle::Turtle{FT,UT}, dist::FT) where {FT,UT}","category":"page"},{"location":"#PlantGeomTurtle.F","page":"Home","title":"PlantGeomTurtle.F","text":"F(dist)\n\nMoves a turtle forward a given distance.\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeomTurtle.f!-Union{Tuple{UT}, Tuple{FT}, Tuple{Turtle{FT, UT}, FT}} where {FT, UT}","page":"Home","title":"PlantGeomTurtle.f!","text":"f!(turtle, dist)\n\nMove turtle forward a given distance.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> f!(turtle, 2.0);\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"RV\nrv!(turtle::Turtle{FT,UT}, strength::FT) where {FT,UT}","category":"page"},{"location":"#PlantGeomTurtle.RV","page":"Home","title":"PlantGeomTurtle.RV","text":"RV(strength)\n\nRotates the turtle towards the Z axis. See documentation for rv! for details.\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeomTurtle.rv!-Union{Tuple{UT}, Tuple{FT}, Tuple{Turtle{FT, UT}, FT}} where {FT, UT}","page":"Home","title":"PlantGeomTurtle.rv!","text":"rv!(turtle, strength)\n\nRotates the turtle towards the Z axis. The angle of rotation is proportional to the cosine of the zenith angle of the turtle (i.e., angle between its head and the vertical axis) with the absolute value of strength being the proportion between the two. strength should vary between -1 and 1. If strength is negative, the turtle rotates downwards (i.e., towards negative values of Z axis), otherwise upwards.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> ra!(turtle, 45.0);\n\njulia> rv!(turtle, 0.5);\n\n\n\n\n\n","category":"method"},{"location":"#Geometry-primitives","page":"Home","title":"Geometry primitives","text":"","category":"section"},{"location":"#Triangle","page":"Home","title":"Triangle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Triangle!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT),\n                    move = false, material = nothing, color = nothing) where FT","category":"page"},{"location":"#PlantGeomPrimitives.Triangle!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.Triangle!","text":"Triangle!(turtle; length = 1.0, width = 1.0, move = false,\n          material = nothing, color = nothing)\n\nGenerate a triangle in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the triangle to.\nlength: Length of the triangle.\nwidth: Width of the triangle.\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA triangle mesh will be generated representing the triangle. The triangle will be generated in front of the turtle, on the plane defined by the arm and head axes of the turtle. The argument length refers to the axis of the triangle aligned with the head axis of the turtle, whereas width refers to the orthogonal axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to length.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> Triangle!(turtle; length = 2.0, width = 1.0);\n\n\n\n\n\n","category":"method"},{"location":"#Rectangle","page":"Home","title":"Rectangle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Rectangle!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT),\n                    move = false, material = nothing, color = nothing) where FT","category":"page"},{"location":"#PlantGeomPrimitives.Rectangle!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.Rectangle!","text":"Rectangle!(turtle; length = 1.0, width = 1.0, move = false,\n           material = nothing, color = nothing)\n\nGenerate a rectangle in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the rectangle to.\nlength: Length of the rectangle.\nwidth: Width of the rectangle.\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA triangle mesh will be generated representing the rectangle. The rectangle will be generated in front of the turtle, on the plane defined by the arm and head axes of the turtle. The argument length refers to the axis of the rectangle aligned with the head axis of the turtle, whereas width refers to the orthogonal axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to length.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> Rectangle!(turtle; length = 1.0, width = 0.5);\n\n\n\n\n\n","category":"method"},{"location":"#Trapezoid","page":"Home","title":"Trapezoid","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trapezoid!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT), ratio::FT = one(FT),\n                    move = false, material = nothing, color = nothing) where FT","category":"page"},{"location":"#PlantGeomPrimitives.Trapezoid!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.Trapezoid!","text":"Trapezoid!(turtle; length = 1.0, width = 1.0, ratio = 1.0, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a trapezoid in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the trapezoid to.\nlength: Length of the trapezoid.\nwidth: Width of the base of the trapezoid.\nratio: Ratio between the width of the top and base of the trapezoid.\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA triangle mesh will be generated representing the trapezoid. The trapezoid will be generated in front of the turtle, on the plane defined by the arm and head axes of the turtle. The argument length refers to the axis of the trapezoid aligned with the head axis of the turtle, whereas width refers to the orthogonal axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to length.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> Trapezoid!(turtle; length = 1.0, width = 1.0, ratio = 0.5);\n\n\n\n\n\n","category":"method"},{"location":"#Ellipse","page":"Home","title":"Ellipse","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ellipse!(turtle::Turtle{FT}; length = one(FT), width = one(FT), n = 20,\n                    move = false, material = nothing, color = nothing) where FT","category":"page"},{"location":"#PlantGeomPrimitives.Ellipse!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.Ellipse!","text":"Ellipse!(turtle; length = 1.0, width = 1.0, n = 20, move = false,\n         material = nothing, color = nothing)\n\nGenerate an ellipse in front of a turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the ellipse to.\nlength: Length of the ellipse.\nwidth: Width of the ellipse.\nn: Number of triangles of the mesh approximating the ellipse (an integer).\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA triangle mesh will be generated with n triangles that approximates an ellipse. The ellipse will be generated in front of the turtle, on the plane defined by the arm and head axes of the turtle. The argument length refers to the axis of the ellipse aligned with the head axis of the turtle, whereas width refers to the orthogonal axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to length.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> Ellipse!(turtle; length = 1.0, width = 0.5, n = 40);\n\n\n\n\n\n","category":"method"},{"location":"#Hollow-cylinder","page":"Home","title":"Hollow cylinder","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HollowCylinder!(turtle::Turtle{FT}; length::FT = 1.0, width::FT = 1.0, height::FT = 1.0, n::Int = 40) where FT\nSolidCylinder!(turtle::Turtle{FT}; length::FT = 1.0, width::FT = 1.0, height::FT = 1.0, n::Int = 80) where FT","category":"page"},{"location":"#PlantGeomPrimitives.HollowCylinder!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.HollowCylinder!","text":"HollowCylinder!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 40, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a hollow cylinder in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the hollow cylinder to.\nlength: Length of the ellipse at the base of the hollow cylinder.\nwidth: Width of the ellipse at the base of the hollow cylinder.\nheight: Height of the hollow cylinder.\nn: Number of triangles in the mesh (must be even).\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA mesh will be generated with n triangles that approximate the hollow cylinder. The cylinder will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The length argument refers to the up axis, whereas width refers to the arm axis and height is associated to the head axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> HollowCylinder!(turtle; length = 1.0, width = 1.0, height = 2.0, n = 40);\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomPrimitives.SolidCylinder!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.SolidCylinder!","text":"SolidCylinder!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 80, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a solid cylinder in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the solid cylinder to.\nlength: Length of the ellipse at the base of the solid cylinder.\nwidth: Width of the ellipse at the base of the solid cylinder.\nheight: Height of the solid cylinder.\nn: Number of triangles in the mesh (must be even).\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA mesh will be generated with n triangles that approximate the solid cylinder. The cylinder will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The length argument refers to the up axis, whereas width refers to the arm axis and height is associated to the head axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> SolidCylinder!(turtle; length = 1.0, width = 1.0, height = 2.0, n = 80);\n\n\n\n\n\n","category":"method"},{"location":"#Hollow-cone","page":"Home","title":"Hollow cone","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HollowCone!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT), height::FT = one(FT), n::Int = 20,\n                    move = false, material = nothing, color = nothing) where FT\nSolidCone!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT), height::FT = one(FT), n::Int = 40,\n                    move = false, material = nothing, color = nothing) where FT","category":"page"},{"location":"#PlantGeomPrimitives.HollowCone!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.HollowCone!","text":"HollowCone!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 20, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a hollow cone in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the hollow cone to.\nlength: Length of the ellipse at the base of the hollow cone.\nwidth: Width of the ellipse at the base of the hollow cone.\nheight: Height of the hollow cone.\nn: Number of triangles in the mesh.\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA mesh will be generated with n triangles that approximate the hollow cone. The cone will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The length argument refers to the up axis, whereas width refers to the arm axis and height is associated to the head axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> Trapezoid!(turtle; length = 1.0, width = 1.0, ratio = 0.5);\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomPrimitives.SolidCone!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.SolidCone!","text":"SolidCone!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 40, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a solid frustum in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the solid cone to.\nlength: Length of the ellipse at the base of the solid cone.\nwidth: Width of the ellipse at the base of the solid cone.\nheight: Height of the solid cone.\nn: Number of triangles in the mesh (must be even).\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA mesh will be generated with n triangles that approximate the solid cone. The cone will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The length argument refers to the up axis, whereas width refers to the arm axis and height is associated to the head axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> SolidCone!(turtle; length = 1.0, width = 1.0, height = 2.0, n = 40);\n\n\n\n\n\n","category":"method"},{"location":"#Cube","page":"Home","title":"Cube","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SolidCube!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT), height::FT = one(FT),\n                    move = false, material = nothing, color = nothing) where FT\nHollowCube!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT), height::FT = one(FT),\n                    move = false, material = nothing, color = nothing) where FT","category":"page"},{"location":"#PlantGeomPrimitives.SolidCube!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.SolidCube!","text":"SolidCube!(turtle; length = 1.0, width = 1.0, height = 1.0, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a solid cube in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the solid cube to.\nlength: Length of the rectangle at the base of the solid cube.\nwidth: Width of the rectangle at the base of the solid cube.\nheight: Height of the solid cube.\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA mesh will be generated of a solid cube. The cube will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The length argument refers to the up axis, whereas width refers to the arm axis and height is associated to the head axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> SolidCube!(turtle; length = 1.0, width = 1.0, height = 2.0);\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomPrimitives.HollowCube!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.HollowCube!","text":"HollowCube!(turtle; length = 1.0, width = 1.0, height = 1.0, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a hollow cube in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the hollow cube to.\nlength: Length of the rectangle at the base of the hollow cube.\nwidth: Width of the rectangle at the base of the hollow cube.\nheight: Height of the hollow cube.\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA mesh will be generated of a hollow cube. The cube will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The length argument refers to the up axis, whereas width refers to the arm axis and height is associated to the head axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> HollowCube!(turtle; length = 1.0, width = 1.0, height = 2.0);\n\n\n\n\n\n","category":"method"},{"location":"#Solid-frustum","page":"Home","title":"Solid frustum","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SolidFrustum!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT), height::FT = one(FT), ratio::FT = one(FT), n::Int = 80,\n                    move = false, material = nothing, color = nothing) where FT\nHollowFrustum!(turtle::Turtle{FT}; length::FT = one(FT), width::FT = one(FT), height::FT = one(FT), ratio::FT = one(FT), n::Int = 40,\n                    move = false, material = nothing, color = nothing) where FT","category":"page"},{"location":"#PlantGeomPrimitives.SolidFrustum!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.SolidFrustum!","text":"SolidFrustum!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 80, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a solid frustum in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the solid frustum to.\nlength: Length of the ellipse at the base of the solid frustum.\nwidth: Width of the ellipse at the base of the solid frustum.\nheight: Height of the solid frustum.\nn: Number of triangles in the mesh (must be even).\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA mesh will be generated with n triangles that approximate the solid frustum. The frustum will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The length argument refers to the up axis, whereas width refers to the arm axis and height is associated to the head axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> SolidFrustum!(turtle; length = 1.0, width = 1.0, height = 2.0, n = 80);\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeomPrimitives.HollowFrustum!-Union{Tuple{Turtle{FT}}, Tuple{FT}} where FT","page":"Home","title":"PlantGeomPrimitives.HollowFrustum!","text":"HollowFrustum!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 40, move = false,\nmaterial = nothing, color = nothing)\n\nGenerate a hollow frustum in front of the turtle and feed it to a turtle.\n\nArguments\n\nturtle: The turtle that we feed the hollow frustum to.\nlength: Length of the ellipse at the base of the hollow frustum.\nwidth: Width of the ellipse at the base of the hollow frustum.\nheight: Height of the hollow frustum.\nn: Number of triangles in the mesh (must be even).\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA mesh will be generated with n triangles that approximate the hollow frustum. The frustum will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The length argument refers to the up axis, whereas width refers to the arm axis and height is associated to the head axis.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> turtle = Turtle();\n\njulia> HollowFrustum!(turtle; length = 1.0, width = 1.0, height = 2.0, n = 40);\n\n\n\n\n\n","category":"method"},{"location":"#Generic-mesh","page":"Home","title":"Generic mesh","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mesh!(turtle::Turtle{FT}, m::Mesh; scale::Vec{FT} = Vec{FT}(1.0,1.0,1.0),\n               move = false) where FT","category":"page"},{"location":"#PlantGeomTurtle.Mesh!-Union{Tuple{FT}, Tuple{Turtle{FT}, PlantGeomPrimitives.Mesh}} where FT","page":"Home","title":"PlantGeomTurtle.Mesh!","text":"Mesh!(turtle, m::Mesh; scale = Vec(1.0, 1.0, 1.0), move = false,\nmaterial = nothing, color = nothing)\n\nFeed a pre-existing mesh to a turtle after scaling.\n\nArguments\n\nturtle: The turtle that we feed the mesh to.\nm: The pre-existing unscaled mesh in standard position and orientation.\nscale: Vector with scaling factors for the x, y and z axes.\nmove: Whether to move the turtle forward or not (true or false).\nmaterial: The material object for the ray tracer (optional).\ncolor: The color of the ellipse for rendering (optional).\n\nDetails\n\nA pre-existing mesh will be scaled (acccording to scale), rotate so that it is oriented in the same direction as the turtle and translated so that the mesh is generated in front of the turtle. A deep copy of the original mesh is made prior to any transformation.\n\nWhen move = true, the turtle will be moved forward by a distance equal to height.\n\nThe material object must inherit from Material (see ray tracing documentation for detail) and the color can be any type that inherits from Colorant (from ColorTypes.jl).\n\nReturn\n\nReturns nothing but modifies the turtle as a side effect.\n\nExamples\n\njulia> import PlantGeomPrimitives as PG\n\njulia> e = PG.Ellipse();\n\njulia> turtle = Turtle();\n\njulia> Mesh!(turtle, e, scale = PG.Vec(2.0, 2.0, 2.0));\n\n\n\n\n\n","category":"method"}]
}
